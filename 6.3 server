import sys
import errno
import socket
import math
import time
from multiprocessing import Process

print(r"""
-----------------------------------------
-   ONLINE CALCULATOR BY AMIKERS 2021   -
-   __________Server Edition_________   -
-----------------------------------------
               """)

def findLog(x):
	print(f"[*] Calculating log({x})")
	x = int(x)
	try:
		ans = math.log(x)
	except:
		ans = "Error !!!!. Please retry again..."

	return ans

def findSqrt(x):
	print(f"[*] Calculating square root of {x}")
	x = int(x)
	if(x >= 0):
		try:
			ans = math.sqrt(x)
		except:
			ans = "Error !!!!. Please retry again..."
	else:
		ans = "unable to be calculated because it is a negative value."

	return ans

def findExp(x):
	print(f"[*] Calculating exponential of {x}")
	x = float(x)
	try:
		ans = math.exp(x)
	except:
		ans = "Error !!!!. Please retry again..."

	return ans
	
def findSin(x):
	print(f"[*] Calculating Sin({x})")
	x = int(x)
	try:
		ans = math.sin(x)
	except:
		ans = "Error !!!!. Please retry again..."

	return ans	
	
def findCos(x):
	print(f"[*] Calculating Cos({x})")
	x = int(x)
	try:
		ans = math.cos(x)
	except:
		ans = "Error !!!!. Please retry again..."

	return ans	

def findTan(x):
	print(f"[*] Calculating Tan({x})")
	x = int(x)
	try:
		ans = math.tan(x)
	except:
		ans = "Error !!!!. Please retry again..."

	return ans	
	
def process_start(s_sock):
	s_sock.send(str.encode("[*] Get connection from Server [*]\n"))
	while True:
		data = s_sock.recv(2048)
		
		data = data.decode('utf-8')
		try:
			option, value1 = data.split(" ", 2)
		except:
			print("[*] Calculation Error, client disconnected [*]\n")
		
		if not data:
			break

		if(option == 'log'):
			ans = findLog(value1)
		elif(option == 'sqrt'):
			ans = findSqrt(value1)
		elif(option == 'exp'):
			ans = findExp(value1)
		elif(option == 'sin'):
			ans = findSin(value1)
		elif(option == 'cos'):
			ans = findCos(value1)
		elif(option == 'tan'):
			ans = findTan(value1)	

		message = "[*] Answer is  %s." % str(ans)
		print("[*] Calculation Completed [*]\n------------------------------------\n")
		s_sock.sendall(str.encode(message))

	s_sock.close()

if __name__ == '__main__':
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind(("", 8889))
	print("[*] Listening for input from clients... [*]")
	s.listen(3)
	try:
		while True:
			try:
				s_sock, s_addr = s.accept()
				print("[*] Got The Input From: [*]" + str(s_addr))
				p = Process(target = process_start, args = (s_sock,))
				p.start()

			except socket.error:
				print('[*] Sorry socket error [*]')

	except Exception as e:
		print('[*] An exception occured! [*]')
		print(e) 
		sys.exit(1)

	finally:
		s.close()
